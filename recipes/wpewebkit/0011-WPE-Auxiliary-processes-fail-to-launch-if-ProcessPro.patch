From 372d71cc3c907917b572f58c319b5fd2bf62d592 Mon Sep 17 00:00:00 2001
From: Jani Hautakangas <jani@igalia.com>
Date: Wed, 25 Sep 2024 08:52:32 +0300
Subject: [PATCH 11/12] [WPE] Auxiliary processes fail to launch if
 ProcessProviderLibWPE when enabled
 https://bugs.webkit.org/show_bug.cgi?id=280321

Reviewed by NOBODY (OOPS!).

The ProcessProviderLibWPE is only used in the UIProcess, but AuxiliaryProcessMainCommon::parseCommandLine attempts to check if ProcessProviderLibWPE is enabled. Since ProcessProviderLibWPE is never enabled for auxiliary processes, this causes a mismatch in the argument count for auxiliary processes in runtimes where ProcessProviderLibWPE is used. As a result, the auxiliary process never starts.

* Source/WebKit/Shared/unix/AuxiliaryProcessMain.cpp:
(WebKit::AuxiliaryProcessMainCommon::parseCommandLine):
---
 .../Shared/unix/AuxiliaryProcessMain.cpp      | 45 +++++++++----------
 1 file changed, 20 insertions(+), 25 deletions(-)

diff --git a/Source/WebKit/Shared/unix/AuxiliaryProcessMain.cpp b/Source/WebKit/Shared/unix/AuxiliaryProcessMain.cpp
index ce942ed6ce6b..e0f713a216ea 100644
--- a/Source/WebKit/Shared/unix/AuxiliaryProcessMain.cpp
+++ b/Source/WebKit/Shared/unix/AuxiliaryProcessMain.cpp
@@ -38,10 +38,6 @@
 #include "unix/BreakpadExceptionHandler.h"
 #endif
 
-#if USE(LIBWPE) && !ENABLE(BUBBLEWRAP_SANDBOX) && (!PLATFORM(PLAYSTATION) || USE(WPE_BACKEND_PLAYSTATION))
-#include "ProcessProviderLibWPE.h"
-#endif
-
 namespace WebKit {
 
 AuxiliaryProcessMainCommon::AuxiliaryProcessMainCommon()
@@ -54,26 +50,18 @@ AuxiliaryProcessMainCommon::AuxiliaryProcessMainCommon()
 // The command line is constructed in ProcessLauncher::launchProcess.
 bool AuxiliaryProcessMainCommon::parseCommandLine(int argc, char** argv)
 {
-#if USE(GLIB) && OS(LINUX)
-    int minimumNumArgs = 4;
-#else
-    int minimumNumArgs = 3;
-#endif
+    int argIndex = 1; // Start from argv[1], since argv[0] is the program name.
 
-#if USE(LIBWPE) && !ENABLE(BUBBLEWRAP_SANDBOX) && (!PLATFORM(PLAYSTATION) || USE(WPE_BACKEND_PLAYSTATION))
-    if (ProcessProviderLibWPE::singleton().isEnabled())
-        minimumNumArgs = 3;
-#endif
-
-    if (argc < minimumNumArgs)
+    // Ensure we have enough arguments for processIdentifier and connectionIdentifier
+    if (argc < argIndex + 2)
         return false;
 
-    if (auto processIdentifier = parseInteger<uint64_t>(span(argv[1])))
+    if (auto processIdentifier = parseInteger<uint64_t>(span(argv[argIndex++])))
         m_parameters.processIdentifier = LegacyNullableObjectIdentifier<WebCore::ProcessIdentifierType>(*processIdentifier);
     else
         return false;
 
-    if (auto connectionIdentifier = parseInteger<int>(span(argv[2])))
+    if (auto connectionIdentifier = parseInteger<int>(span(argv[argIndex++])))
         m_parameters.connectionIdentifier = IPC::Connection::Identifier { *connectionIdentifier };
     else
         return false;
@@ -82,24 +70,31 @@ bool AuxiliaryProcessMainCommon::parseCommandLine(int argc, char** argv)
         return false;
 
 #if USE(GLIB) && OS(LINUX)
-    if (minimumNumArgs == 4) {
-        auto pidSocket = parseInteger<int>(span(argv[3]));
-        if (!pidSocket || *pidSocket < 0)
+    // Parse pidSocket if available
+    if (argc > argIndex) {
+        auto pidSocket = parseInteger<int>(span(argv[argIndex]));
+        if (pidSocket && *pidSocket >= 0) {
+            IPC::sendPIDToPeer(*pidSocket);
+            RELEASE_ASSERT(!close(*pidSocket));
+            ++argIndex;
+        } else {
             return false;
-
-        IPC::sendPIDToPeer(*pidSocket);
-        RELEASE_ASSERT(!close(*pidSocket));
+        }
     }
 #endif
 
 #if ENABLE(DEVELOPER_MODE)
-    if (argc > minimumNumArgs && argv[minimumNumArgs] && !strcmp(argv[minimumNumArgs], "--configure-jsc-for-testing"))
-        JSC::Config::configureForTesting();
+    // Check last remainnging options for JSC testing
+    for (; argIndex < argc; ++argIndex) {
+        if (argv[argIndex] && !strcmp(argv[argIndex], "--configure-jsc-for-testing"))
+            JSC::Config::configureForTesting();
+    }
 #endif
 
     return true;
 }
 
+
 void AuxiliaryProcess::platformInitialize(const AuxiliaryProcessInitializationParameters&)
 {
     struct sigaction signalAction;
-- 
2.43.0

