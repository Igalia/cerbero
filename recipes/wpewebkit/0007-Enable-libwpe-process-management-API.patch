From 7beae1e565e36ee73ad737bcf7c019b55c7af353 Mon Sep 17 00:00:00 2001
From: Jani Hautakangas <jani@igalia.com>
Date: Thu, 14 Jul 2022 00:39:50 +0300
Subject: [PATCH 7/7] Enable libwpe process management API

---
 Source/WebKit/SourcesWPE.txt                  |  1 +
 .../Launcher/glib/ProcessLauncherGLib.cpp     | 53 +++++++++++++-
 .../Launcher/glib/WPEProcessProvider.cpp      | 71 +++++++++++++++++++
 .../Launcher/glib/WPEProcessProvider.h        | 34 +++++++++
 4 files changed, 157 insertions(+), 2 deletions(-)
 create mode 100644 Source/WebKit/UIProcess/Launcher/glib/WPEProcessProvider.cpp
 create mode 100644 Source/WebKit/UIProcess/Launcher/glib/WPEProcessProvider.h

diff --git a/Source/WebKit/SourcesWPE.txt b/Source/WebKit/SourcesWPE.txt
index 97fedd4409ce..153db71b2595 100644
--- a/Source/WebKit/SourcesWPE.txt
+++ b/Source/WebKit/SourcesWPE.txt
@@ -211,6 +211,7 @@ UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
 UIProcess/Launcher/glib/BubblewrapLauncher.cpp
 UIProcess/Launcher/glib/FlatpakLauncher.cpp
 UIProcess/Launcher/glib/XDGDBusProxy.cpp
+UIProcess/Launcher/glib/WPEProcessProvider.cpp
 
 UIProcess/WebsiteData/soup/WebsiteDataStoreSoup.cpp
 UIProcess/WebsiteData/unix/WebsiteDataStoreUnix.cpp
diff --git a/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp b/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
index 09f534a86b3b..e148885c859e 100644
--- a/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
+++ b/Source/WebKit/UIProcess/Launcher/glib/ProcessLauncherGLib.cpp
@@ -31,6 +31,7 @@
 #include "Connection.h"
 #include "FlatpakLauncher.h"
 #include "ProcessExecutablePath.h"
+#include "WPEProcessProvider.h"
 #include <errno.h>
 #include <fcntl.h>
 #include <glib.h>
@@ -68,10 +69,54 @@ static bool isFlatpakSpawnUsable()
 }
 #endif
 
+#if USE(WPE_PROCESS_LAUNCHER)
+static wpe_process_type wpeProcessType(ProcessLauncher::ProcessType processType)
+{
+    switch (processType) {
+    case ProcessLauncher::ProcessType::Network:
+        return WPE_PROCESS_TYPE_NETWORK;
+#if ENABLE(GPU_PROCESS)
+    case ProcessLauncher::ProcessType::GPU:
+        return WPE_PROCESS_TYPE_GPU;
+#endif
+    case ProcessLauncher::ProcessType::Web:
+    default:
+        return WPE_PROCESS_TYPE_WEB;
+    }
+}
+#endif
+
 void ProcessLauncher::launchProcess()
 {
     IPC::Connection::SocketPair socketPair = IPC::Connection::createPlatformConnection(IPC::Connection::ConnectionOptions::SetCloexecOnServer);
 
+    GUniquePtr<gchar> processIdentifier(g_strdup_printf("%" PRIu64, m_launchOptions.processIdentifier.toUInt64()));
+    GUniquePtr<gchar> webkitSocket(g_strdup_printf("%d", socketPair.client));
+
+#if defined(WPE_ENABLE_PROCESS) && WPE_ENABLE_PROCESS
+    // Currently this feature is behind compile time flag but in the future this flag should be removed
+    if (WPEProcessProvider::singleton().isEnabled()) {
+        unsigned nargs = 3;
+        char** argv = g_newa(char*, nargs);
+        unsigned i = 0;
+        argv[i++] = processIdentifier.get();
+        argv[i++] = webkitSocket.get();
+        argv[i++] = nullptr;
+
+        m_processIdentifier = WPEProcessProvider::singleton().launchProcess(m_launchOptions, argv, socketPair.client);
+
+        if (m_processIdentifier > -1) {
+            // We've finished launching the process, message back to the main run loop.
+            RunLoop::main().dispatch([protectedThis = Ref {*this}, this, serverSocket = socketPair.server] {
+                didFinishLaunchingProcess(m_processIdentifier, serverSocket);
+            });
+        } else {
+            g_error("Unable to spawn a new child process");
+        }
+        return;
+    }
+#endif
+
     String executablePath;
     CString realExecutablePath;
     switch (m_launchOptions.processType) {
@@ -92,8 +137,6 @@ void ProcessLauncher::launchProcess()
     }
 
     realExecutablePath = FileSystem::fileSystemRepresentation(executablePath);
-    GUniquePtr<gchar> processIdentifier(g_strdup_printf("%" PRIu64, m_launchOptions.processIdentifier.toUInt64()));
-    GUniquePtr<gchar> webkitSocket(g_strdup_printf("%d", socketPair.client));
     unsigned nargs = 4; // size of the argv array for g_spawn_async()
 
 #if ENABLE(DEVELOPER_MODE)
@@ -190,7 +233,13 @@ void ProcessLauncher::terminateProcess()
     if (!m_processIdentifier)
         return;
 
+#if defined(WPE_ENABLE_PROCESS) && WPE_ENABLE_PROCESS
+    if (WPEProcessProvider::singleton().isEnabled()) {
+        WPEProcessProvider::singleton().kill(m_processIdentifier);
+    } else
+#endif
     kill(m_processIdentifier, SIGKILL);
+
     m_processIdentifier = 0;
 }
 
diff --git a/Source/WebKit/UIProcess/Launcher/glib/WPEProcessProvider.cpp b/Source/WebKit/UIProcess/Launcher/glib/WPEProcessProvider.cpp
new file mode 100644
index 000000000000..2437198c2145
--- /dev/null
+++ b/Source/WebKit/UIProcess/Launcher/glib/WPEProcessProvider.cpp
@@ -0,0 +1,71 @@
+#include "config.h"
+#include "WPEProcessProvider.h"
+
+#if defined(WPE_ENABLE_PROCESS) && WPE_ENABLE_PROCESS
+
+#include <wpe/wpe.h>
+#include <wtf/NeverDestroyed.h>
+
+namespace WebKit {
+
+namespace {
+
+static wpe_process_type wpeProcessType(ProcessLauncher::ProcessType processType)
+{
+    switch (processType) {
+    case ProcessLauncher::ProcessType::Network:
+        return WPE_PROCESS_TYPE_NETWORK;
+#if ENABLE(GPU_PROCESS)
+    case ProcessLauncher::ProcessType::GPU:
+        return WPE_PROCESS_TYPE_GPU;
+#endif
+    case ProcessLauncher::ProcessType::Web:
+    default:
+        return WPE_PROCESS_TYPE_WEB;
+    }
+}
+
+}
+
+WPEProcessProvider& WPEProcessProvider::singleton()
+{
+    static NeverDestroyed<WPEProcessProvider> sharedProvider;
+    return sharedProvider;
+}
+
+WPEProcessProvider::WPEProcessProvider()
+    : m_provider(wpe_process_provider_create(), wpe_process_provider_destroy)
+{
+
+}
+
+bool WPEProcessProvider::isEnabled()
+{
+    if (!m_provider)
+        return false;
+    return true;
+}
+
+ProcessID WPEProcessProvider::launchProcess(const ProcessLauncher::LaunchOptions& launchOptions , char** argv, int childProcessSocket)
+{
+    UNUSED_PARAM(childProcessSocket);
+    if (!m_provider)
+        return -1;
+
+    if (wpe_process_launch(m_provider.get(), wpeProcessType(launchOptions.processType), argv) > -1) {
+        return launchOptions.processIdentifier.toUInt64();
+    }
+    return -1;
+}
+
+void WPEProcessProvider::kill(ProcessID processID)
+{
+    if (!m_provider)
+        return;
+
+    wpe_process_terminate(m_provider.get(), processID);
+}
+
+} // namespace WebKit
+
+#endif // defined(WPE_ENABLE_PROCESS) && WPE_ENABLE_PROCESS
\ No newline at end of file
diff --git a/Source/WebKit/UIProcess/Launcher/glib/WPEProcessProvider.h b/Source/WebKit/UIProcess/Launcher/glib/WPEProcessProvider.h
new file mode 100644
index 000000000000..9398981cea27
--- /dev/null
+++ b/Source/WebKit/UIProcess/Launcher/glib/WPEProcessProvider.h
@@ -0,0 +1,34 @@
+#pragma once
+
+#if defined(WPE_ENABLE_PROCESS) && WPE_ENABLE_PROCESS
+
+#include "ProcessLauncher.h"
+
+#include <wtf/ProcessID.h>
+
+struct wpe_process_provider;
+
+namespace WebKit {
+
+class WPEProcessProvider {
+    WTF_MAKE_NONCOPYABLE(WPEProcessProvider);
+    friend class NeverDestroyed<WPEProcessProvider>;
+
+public:
+    static WPEProcessProvider& singleton();
+
+    bool isEnabled();
+
+    ProcessID launchProcess(const ProcessLauncher::LaunchOptions&, char** argv, int childProcessSocket);
+
+    void kill(ProcessID processID);
+
+private:
+    WPEProcessProvider();
+
+    std::unique_ptr<struct wpe_process_provider, void (*)(struct wpe_process_provider*)> m_provider;
+};
+
+} // namespace WebKit
+
+#endif // defined(WPE_ENABLE_PROCESS) && WPE_ENABLE_PROCESS
\ No newline at end of file
-- 
2.37.3

