From 51160a3c1b6649ba888235b4e9d620a6fa75d5cb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fernando=20Jim=C3=A9nez=20Moreno?= <ferjmoreno@gmail.com>
Date: Tue, 25 May 2021 16:00:54 +0200
Subject: [PATCH 20/25] Android remove uses of shm_open and shm_unlink

---
 .../WebKit/Platform/unix/SharedMemoryUnix.cpp | 25 ++++++++++++++-----
 1 file changed, 19 insertions(+), 6 deletions(-)

diff --git a/Source/WebKit/Platform/unix/SharedMemoryUnix.cpp b/Source/WebKit/Platform/unix/SharedMemoryUnix.cpp
index 05a93d97d3cb..dca268ea1051 100644
--- a/Source/WebKit/Platform/unix/SharedMemoryUnix.cpp
+++ b/Source/WebKit/Platform/unix/SharedMemoryUnix.cpp
@@ -56,6 +56,9 @@
 #include "ArgumentCoders.h"
 #endif
 
+#include <glib.h>
+#include <wtf/glib/GUniquePtr.h>
+
 namespace WebKit {
 
 SharedMemory::Handle::Handle()
@@ -122,6 +125,7 @@ static inline int accessModeMMap(SharedMemory::Protection protection)
 
 static int createSharedMemory()
 {
+#if 0
     int fileDescriptor = -1;
 
 #if HAVE(LINUX_MEMFD_H)
@@ -161,25 +165,34 @@ static int createSharedMemory()
 #endif
 
     return fileDescriptor;
+#endif
 }
 
 RefPtr<SharedMemory> SharedMemory::allocate(size_t size)
 {
-    int fileDescriptor = createSharedMemory();
+    GUniquePtr<char> name(g_build_filename(g_get_user_runtime_dir(), "WK2SharedMemory.XXXXXX", nullptr));
+    int fileDescriptor = mkstemp(name.get());
     if (fileDescriptor == -1) {
         WTFLogAlways("Failed to create shared memory: %s", safeStrerror(errno).data());
         return nullptr;
     }
 
-    while (ftruncate(fileDescriptor, size) == -1) {
-        if (errno != EINTR) {
-            closeWithRetry(fileDescriptor);
-            return nullptr;
-        }
+    {
+        long flags = fcntl(fileDescriptor, F_GETFD);
+        fcntl(fileDescriptor, F_SETFD, flags | FD_CLOEXEC);
+        unlink(name.get());
+    }
+
+    int ret = posix_fallocate(fileDescriptor, 0, size);
+    if (ret != 0) {
+        WTFLogAlways("  failed to fallocate");
+        closeWithRetry(fileDescriptor);
+        return nullptr;
     }
 
     void* data = mmap(nullptr, size, PROT_READ | PROT_WRITE, MAP_SHARED, fileDescriptor, 0);
     if (data == MAP_FAILED) {
+        WTFLogAlways("  failed to mmap");
         closeWithRetry(fileDescriptor);
         return nullptr;
     }
-- 
2.37.3

